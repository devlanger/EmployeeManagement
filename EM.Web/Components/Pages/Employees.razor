@page "/employees"
@using EM.Application.Services.Abstract
@using EM.Core.Models
@using EM.Application.Abstract.Services
@using Microsoft.AspNetCore.Authorization
@inject IDataProvider<Employee> DataProvider
@inject IBonusService BonusService;
@inject IEmployeeService EmployeeService;
@inject HttpClient Http
@attribute [Authorize]
@rendermode InteractiveServer

<AuthorizeView>
    <p>Logged as: @context.User.Identity?.Name!</p>
    <PageTitle>Employees</PageTitle>

    <h1>Employees</h1>

    <p>This component demonstrates showing data.</p>

    @if (_employees == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <table class="table">
            <thead>
            <tr>
                <th>Id</th>
                <th>Personal Id Number</th>
                <th>Salary</th>
                <th></th>
            </tr>
            </thead>
            <tbody>
            <ul>
                <li>
                    <button @onclick="GiveBonusToLowestSalaryMember">Give Bonus to lowest salary member</button>
                </li>
                <li>
                    <a @onclick="AddEmployee">Add Employee</a>
                </li>
            </ul>

            @foreach (var employee in _employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.PersonalIdNumber</td>
                    <td>@employee.Salary</td>
                    <td>
                        <button @onclick="() => GiveBonus(employee)">Give Bonus</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
</AuthorizeView>

@code {
    private Employee[]? _employees;

    protected override async Task OnInitializedAsync()
    {
        var e = await Http.GetFromJsonAsync<List<Employee>>("api/employee");
        _employees = e?.ToArray();
    }

    private async void GiveBonusToLowestSalaryMember()
    {
        var employee = await EmployeeService.GetEmployeeWithSmallestSalaryAsync();
        BonusService.GiveBonus(employee, 0.2m);

        if (_employees != null)
            await DataProvider.SaveAllAsync(_employees);
    }

    private void GiveBonus(Employee employee)
    {
        BonusService.GiveBonus(employee, 0.2m);

        if (_employees != null)
            DataProvider.SaveAllAsync(_employees);
    }

    private void AddEmployee()
    {
    }

}