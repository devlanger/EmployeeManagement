@page "/employees"
@using EM.Application.Abstract.Services
@using EM.Application.Services.Abstract
@using EM.Core.Models
@using Microsoft.AspNetCore.Authorization
@using IdentityConstants = EM.Infrastructure.Data.IdentityConstants
@inject IBonusService BonusService;
@inject IUserService UserService;
@inject IHttpClientFactory HttpClientFactory
@inject IDataProvider<ApplicationUser> DataProvider
@attribute [Authorize(Roles = $"{IdentityConstants.ADMIN_ROLE_NAME}, {IdentityConstants.EMPLOYEE_ROLE_NAME}")]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<AuthorizeView>
    <PageTitle>Employees</PageTitle>

    <h1>Employees</h1>

    @if (_employees == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <div>
            <button @onclick="() => GiveBonusToLowestSalaryMember()" type="button" class="btn btn-primary">Give Bonus to lowest salary member</button>
        </div>
        
        <table class="table">
            <thead>
            <tr>
                <th>Id</th>
                <th>Personal Id Number</th>
                <th>Full Name</th>
                <th>Team</th>
                <th>Salary</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>

            @foreach (var employee in _employees)
            {
                <tr>
                    <td>@employee.Id</td>
                    <td>@employee.PersonalIdNumber</td>
                    <td>@employee.FirstName @employee.LastName</td>
                    <td>@(employee.Team is null ? "Not in team." : employee.Team?.Name)</td>
                    <td>@employee.Salary</td>
                    <td>
                        <button type="button" class="btn btn-primary" @onclick="() => GiveBonus(employee)">Give Bonus</button>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
</AuthorizeView>

@code {
    private ApplicationUser[]? _employees;

    protected override async Task OnInitializedAsync()
    {
        var client = HttpClientFactory.CreateClient();
        var e = await client.GetFromJsonAsync<List<ApplicationUser>>("http://localhost:5054/api/user");
        _employees = e?.ToArray();
    }

    private async Task GiveBonusToLowestSalaryMember()
    {
        var employee = await UserService.GetUserWithSmallestSalaryAsync();
        BonusService.GiveBonus(employee, 0.2m);
        //var client = HttpClientFactory.CreateClient();

        if (_employees != null)
            await DataProvider.SaveAllAsync(_employees);
        
        //await client.PutAsJsonAsync<List<Employee>>("http://localhost:5054/api/employee");
    }

    private async Task GiveBonus(ApplicationUser employee)
    {
        BonusService.GiveBonus(employee, 0.2m);

        if (_employees != null)
            await DataProvider.SaveAllAsync(_employees);
    }
}