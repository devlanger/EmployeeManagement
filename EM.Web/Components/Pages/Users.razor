@page "/users"
@using EM.Core.Models
@using Microsoft.AspNetCore.Identity
@using IdentityConstants = EM.Infrastructure.Data.IdentityConstants
@inject UserManager<ApplicationUser> UserManager 
@rendermode InteractiveServer

<AuthorizeView Roles="@IdentityConstants.USERS_VIEW_ROLE_NAME">
    <PageTitle>Users</PageTitle>

    <h1>Users</h1>

    @if (users == null)
    {
        <p>
            <em>Loading...</em>
        </p>
    }
    else
    {
        <SearchBar />

        <table class="table">
            <thead>
            <tr>
                <th>Id</th>
                <th>Username</th>
                <th>Email</th>
                <th>Roles</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>

            @foreach (var user in users)
            {
                <tr>
                    <td>@user.User.Id</td>
                    <td>@user.User.UserName</td>
                    <td>@user.User.Email</td>
                    <td>
                        @if (user.Roles != null && user.Roles.Any())
                        {
                            @string.Join(", ", user.Roles)
                        }
                        else
                        {
                            <span>No roles assigned</span>
                        }
                    </td>
                    <td>
                        <AuthorizeView Roles="@IdentityConstants.USERS_MANAGE_ROLE_NAME" Context="ManageUserContext">
                            <a href="users/@user.User.Id">Manage</a>
                        </AuthorizeView>
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }
</AuthorizeView>

@code {
    private List<ApplicationUserDto> users;

    public class ApplicationUserDto
    {
        public ApplicationUser User { get; set; }
        public List<string> Roles { get; set; }
    }

    protected override async Task OnInitializedAsync()
    {
        users = new List<ApplicationUserDto>();
        foreach (var user in UserManager.Users)
        {
            var roles = await UserManager.GetRolesAsync(user);
            var x = new ApplicationUserDto()
            {
                User = user,
                Roles = roles.ToList()
            };
            users.Add(x);
        }
    }

}