@page "/teams/{TeamId:int}"
@using Microsoft.AspNetCore.Authorization
@using IdentityConstants = EM.Infrastructure.Data.IdentityConstants
@using AutoMapper
@using Microsoft.AspNetCore.Mvc.Rendering
@inject NavigationManager NavigationManager
@attribute [Authorize(Roles = $"{IdentityConstants.TEAMS_MANAGE_ROLE_NAME}")]
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<AuthorizeView>
    <Authorized Context="authContext">
        <button class="btn btn-primary" type="button" @onclick="Back">Back</button>

        <PageTitle>Manage Team @TeamId</PageTitle>

        <h1>Manage Team @TeamId</h1>

        @if (TeamMembers != null)
        {
            <p>Members Count: @TeamMembers.Count</p>
            <p>Members list:</p>
            foreach (var member in TeamMembers)
            {
                <a href="/employees" class="btn btn-primary">@member</a>
            }
        }
        else
        {
            <div class="spinner-border" role="status"></div>
        }
        @{
            if (!string.IsNullOrEmpty(StateMessage))
            {
                <div class="alert alert-success mt-3">
                    @StateMessage
                </div>
            }
        }
    </Authorized>
</AuthorizeView>

@code {
    [Parameter]
    public int TeamId { get; set; }

    [Inject]
    private IMapper Mapper { get; set; }
    
    private List<string>? TeamMembers { get; set; }

    [Inject]
    private IHttpClientFactory HttpClientFactory { get; set; }

    MultiSelectList list;

    private string StateMessage = "";

    private void Back()
    {
        NavigationManager.NavigateTo("/teams");
    }
    
    protected override async Task OnInitializedAsync()
    {
        var x = await HttpClientFactory.CreateClient()
            .GetFromJsonAsync<IEnumerable<string>>($"http://localhost:5054/api/Team/members/{TeamId}");
        TeamMembers = x?.ToList();
    }
}