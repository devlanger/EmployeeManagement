@page "/users/{UserId}"
@using EM.Core.Models
@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Identity
@using Microsoft.EntityFrameworkCore
@using IdentityConstants = EM.Infrastructure.Data.IdentityConstants
@using System.ComponentModel.DataAnnotations
@inject NavigationManager NavigationManager
@inject UserManager<ApplicationUser> UserManager 
@attribute [Authorize(Roles = $"{IdentityConstants.ADMIN_ROLE_NAME}")]
@rendermode InteractiveServer

<AuthorizeView>
    <Authorized Context="authContext">
        <button class="btn btn-primary" type="button" @onclick="Back">Back</button>
        
        <p>Logged as: @authContext.User.Identity?.Name!</p>
        <PageTitle>Manager User @UserId</PageTitle>

        <h1>Manage User @User.User.Email</h1>

        <div class="alert alert-success mt-3">
            @StateMessage
        </div>
        <EditForm Model="@UserFormModel" OnValidSubmit="HandleValidSubmit">
            <DataAnnotationsValidator/>
            <ValidationSummary/>

            <div>
                <label for="name">Name:</label>
                <InputText id="username" @bind-Value="UserFormModel.Username" class="form-control"/>
            </div>

            <div>
                <label for="email">Email:</label>
                <InputText id="email" @bind-Value="UserFormModel.Email" type="email" class="form-control"/>
            </div>

            <button type="submit" class="btn btn-primary">Update</button>
        </EditForm>
    </Authorized>
</AuthorizeView>

@code {

    public class UserModel
    {
        [Required(ErrorMessage = "Name is required.")]
        public string Username { get; set; }

        [Required(ErrorMessage = "Email is required.")]
        [EmailAddress(ErrorMessage = "Invalid email address.")]
        public string Email { get; set; }

    // [Range(18, 99, ErrorMessage = "Age must be between 18 and 99.")]
    // public int Age { get; set; }

    //public List<string> Roles { get; set; }
    }

    [Parameter]
    public string UserId { get; set; }

    private string StateMessage = "";
    private UserModel UserFormModel;
    private ApplicationUserDto User;

    public class ApplicationUserDto
    {
        public ApplicationUser User { get; set; }
        public List<string> Roles { get; set; }
    }
    
    public void Back()
    {
        NavigationManager.NavigateTo("/users");
    }
    
    private async void HandleValidSubmit()
    {
        User.User.Email = UserFormModel.Email;
        User.User.UserName = UserFormModel.Username;
        await UserManager.UpdateAsync(User.User);
        Console.WriteLine("Form Submitted Successfully!");
        StateMessage = "Form Submitted Successfully!";
        StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        var user = await UserManager.Users.FirstOrDefaultAsync(x => x.Id == UserId);
        var roles = await UserManager.GetRolesAsync(user);
        User = new ApplicationUserDto()
        {
            User = user,
            Roles = roles.ToList()
        };

        UserFormModel = new UserModel()
        {
            Email = user.Email ?? "",
            Username = user.UserName ?? ""
        };
    }
}